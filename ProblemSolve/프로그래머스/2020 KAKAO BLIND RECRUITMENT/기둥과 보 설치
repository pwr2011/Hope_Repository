#include <string>
#include <vector>
#include<algorithm>
using namespace std;

int N;
// 0 : col 1 : row
bool is_struct[105][105][2] = { false };

bool is_col_ok(int x, int y) {
	bool ret = false;
	if (y == 0) ret = true;
	if (y - 1 >= 0) {
		if (is_struct[y - 1][x][0]) {
			ret = true;
		}
	}
	if (x - 1 >= 0) {
		if (is_struct[y][x - 1][1]) {
			ret = true;
		}
	}
	if (x <= N) {
		if (is_struct[y][x][1]) {
			ret = true;
		}
	}
	return ret;
}

bool is_row_ok(int x, int y) {
	bool ret = false;
	if (y - 1 >= 0) {
		if (is_struct[y - 1][x][0]) {
			ret = true;
		}
		if (is_struct[y - 1][x + 1][0]) {
			ret = true;
		}
	}
	if (x - 1 >= 0 && x + 1 <= N) {
		if (is_struct[y][x - 1][1] && is_struct[y][x + 1][1]) {
			ret = true;
		}
	}

	return ret;
}

// x,y,a,b => a : 0 column 1 row, b : 0 delete 1 install
vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
	N = n;
	vector<vector<int>> answer;

	for (vector<int> c : build_frame) {
		int x = c[0], y = c[1], a = c[2], b = c[3];

		if (b == 0) { //del
			is_struct[y][x][a] = false;
			bool ret = true;
			if (a == 0) { // col
				if (y + 1 <= N) {
					if (is_struct[y + 1][x][0]) {
						ret = is_col_ok(x, y + 1);
						if (!ret) {
							is_struct[y][x][a] = true;
							continue;
						}
					}
					if (is_struct[y + 1][x][1]) {
						ret = is_row_ok(x, y + 1);
						if (!ret) {
							is_struct[y][x][a] = true;
							continue;
						}
					}
					if (x - 1 >= 0) {
						if (is_struct[y + 1][x - 1][1]) {
							ret = is_row_ok(x - 1, y + 1);
							if (!ret) {
								is_struct[y][x][a] = true;
								continue;
							}
						}
					}
				}
			}
			else { // row
				if (x - 1 >= 0) {
					if (is_struct[y][x - 1][1]) {
						ret = is_row_ok(x - 1, y);
						if (!ret) {
							is_struct[y][x][a] = true;
							continue;
						}
					}
				}
				if (x + 2 <= N) {
					if (is_struct[y][x + 1][1]) {
						ret = is_row_ok(x + 1, y);
						if (!ret) {
							is_struct[y][x][a] = true;
							continue;
						}
					}
				}
					if (is_struct[y][x + 1][0]) {
						ret = is_col_ok(x+1, y);
						if (!ret) {
							is_struct[y][x][a] = true;
							continue;
						}
					}
				if (is_struct[y][x][0]) {
					ret = is_col_ok(x, y);
					if (!ret) {
						is_struct[y][x][a] = true;
						continue;
					}
				}
			}
		}
		else { //ins
			bool ret = false;
			if (a == 0) { // col
				ret = is_col_ok(x, y);
				if (ret) {
					is_struct[y][x][0] = true;
				}
			}
			else { // row install
				ret = is_row_ok(x, y);
				if (ret) {
					is_struct[y][x][1] = true;
				}
			}
		}
	}

	for (int x = 0; x <= N; x++) {
		for (int y = 0; y <= N; y++) {
			for (int i = 0; i < 2; i++) {
				if (is_struct[y][x][i]) {
					answer.push_back({ x,y,i });
				}
			}
		}
	}

	sort(answer.begin(), answer.end());
	return answer;
}

int main() {
	solution(5, { {0, 0, 0, 1}, {2, 0, 0, 1}, {4, 0, 0, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {2, 1, 1, 1}, {3, 1, 1, 1}, {2, 0, 0, 0}, {1, 1, 1, 0}, {2, 2, 0, 1} });
}
