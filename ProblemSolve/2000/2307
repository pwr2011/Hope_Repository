#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#define INF 100'000'000
using namespace std;
typedef pair<int, int>P;

int N, M;
int dist[1'005] = { 0, };
vector<pair<P,bool>> g[1'005];
int candi[1'005][1'005];
int rec[1'005];

void trace() {
	int n = N;
	while (n != 1) {
		candi[n][rec[n]] = 1;
		candi[rec[n]][n] = 1;
		n = rec[n];
	}
}

int daikstra() {
	bool visit[1'005] = { false, };
	for (int i = 0; i < 1'005; i++) {
		dist[i] = INF;
	}
	dist[1] = 0;
	priority_queue<P> pq;
	pq.push({ 0,1 });
	while (!pq.empty()) {
		P c = pq.top(); pq.pop();
		int d = -c.first; int cur = c.second;
		if (d != dist[cur])continue;
		visit[cur] = 1;
		if (cur == N) break;
		for (auto n : g[cur]) {
			int next = n.first.first;
			int cost = n.first.second;
			int flag = n.second;
			if (visit[next])continue;
			if (!flag) continue;
			if (dist[next] > dist[cur] + cost) {
				dist[next] = dist[cur] + cost;
				rec[next] = cur;
				pq.push({ -dist[next], next });
			}
		}
	}
	return dist[N];
}

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	cin >> N >> M;
	for (int m = 0; m < M; m++) {
		int a, b, t; cin >> a >> b >> t;
		g[a].push_back({ { b,t },1 });
		g[b].push_back({ { a,t },1 });
	}

	int min_time = daikstra();
	int max_time = 0;
	trace();

	for (int n = 0; n < N; n++) {
		for (int i = 0; i < g[n].size(); i++) {
			if (!candi[n][g[n][i].first.first]) continue;
			g[n][i].second = false;
			int t = daikstra();
			if (t == INF) {
				cout << -1; return 0;
			}
			max_time = max(daikstra(),max_time);
			
			g[n][i].second = true;
		}
	}
	cout << max_time - min_time;
}
