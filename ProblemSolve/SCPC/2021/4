#include <iostream>
#include <vector>
#include <algorithm>
#define ll long long
using namespace std;
typedef pair<ll, ll> P;

ll Answer;

int main(ll argc, char** argv)
{
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	ll T, test_case;

	cin >> T;
	for (test_case = 0; test_case < T; test_case++)
	{
		vector<ll> arr[20'005];
		int arr_size[20'005] = { 0, };
		vector<P> find_min;
		Answer = 0;
		ll N, M; cin >> N >> M;
		for (ll n = 0; n < N; n++) {
			vector<ll> temp;
			ll L; cin >> L;
			for (ll l = 0; l < L; l++) {
				ll stress; cin >> stress;
				temp.push_back(stress);
			}
			arr_size[n] = temp.size();
			sort(temp.begin(), temp.end());
			for (int i = 0; i < 4; i++) {
				arr[n].push_back(temp[i]);
			}
		}

		for (ll n = 0; n < N; n++) {
			find_min.push_back({ arr[n][2] + arr[n][3], n });
		}
		sort(find_min.begin(), find_min.end());
		ll idx1 = find_min[find_min.size()-1].second;
		ll idx2 = find_min[find_min.size()-2].second;

		for (ll n = 0; n < N; n++) {
			if (n == idx1 || n == idx2) {
				if (arr_size[n] % 2 == 0) {
					Answer += (arr[n][0] + arr[n][1]);
				}
				else {
					Answer += (arr[n][0] * 2 + arr[n][1]);
				}
			}
			else {
				if (arr_size[n] % 2 == 0) {
					Answer += (arr[n][0] + arr[n][1]+arr[n][2]+arr[n][3]);
				}
				else {
					Answer += (arr[n][0] * 2 + arr[n][1]+arr[n][2]+arr[n][3]);
				}
			}
		}

		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;
	}

	return 0;
}
