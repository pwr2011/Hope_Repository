#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
typedef pair<int, int> P;

vector<P> g[10'005];
vector<P> inv[10'005];
int time[10'005];
int s, e;
int indgree[10'005];
int cnt[10'005];
bool visit[10'005][10'005];

int main() {
	int N, M; cin >> N >> M;
	for (int m = 0; m < M; m++) {
		int a, b, t;
		cin >> a >> b >> t;
		g[a].push_back(P(b, t));
		inv[b].push_back(P(a, t));
		indgree[b] ++;
	}
	cin >> s >> e;

	queue<P> q;
	q.push(P(s,0));

	while (!q.empty()) {
		P cur = q.front(); q.pop();
		for (P n : g[cur.first]) {
			cnt[n.first]++;
			time[n.first] = max(n.second + cur.second, time[n.first]);
			if (cnt[n.first] == indgree[n.first]) {
				q.push(P(n.first,time[n.first]));
			}
		}
	}
	cout << time[e]<<"\n";
	int ans = 0;

	q.push(P(e, time[e]));
	while (!q.empty()) {
		P cur = q.front();
		q.pop();
		for (P n : inv[cur.first]) {
			if (time[n.first] == cur.second - n.second) {
				if (!visit[cur.first][n.first]) {
					q.push(P(n.first, time[n.first]));
					visit[cur.first][n.first] = true;
					ans++;
				}
			}
		}
	}
	cout << ans;
}
