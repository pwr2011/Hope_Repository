//
// 백트래킹 기법을 이용한 경로 찾기
//

#include<iostream>
#include<fstream>
#include<string>
#include<algorithm>
#include<queue>
#include<vector>
#include<Windows.h>
#define MAX_MAP_SIZE 260
#define BLACK 0 
#define YELLOW 14
#define WHITE 15

#define y first
#define x second
#define INF 100'000
using namespace std;
typedef pair<int, int> p;

// 각각 S와 G의 위치를 저장한다
p s, e;

int map_y_size;
int map_x_size;
int min_dist = INF;
int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };
char map[MAX_MAP_SIZE][MAX_MAP_SIZE];
char record_min_path[MAX_MAP_SIZE][MAX_MAP_SIZE];

int dist[MAX_MAP_SIZE][MAX_MAP_SIZE];
bool visit[MAX_MAP_SIZE][MAX_MAP_SIZE];

vector<int> candidate;

// 출력 색깔 바꾸기 위한 함수
void textcolor(int foreground, int background)
{
	int color = foreground + background * 16;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

// 파일 입력을 위한 함수
void input_file() {
	ifstream file_in("maze.txt");
	if (file_in.fail()) {
		cerr << "파일을 찾을 수 없습니다" << "\n";
		exit(100);
	}

	int y = 0;
	while (!file_in.eof()) {
		string tmp;
		getline(file_in, tmp);

		for (int x = 0; x < tmp.size(); x++) {
			map[y][x] = tmp[x];
			if (map[y][x] == 'S') {
				s.y = y;
				s.x = x;
			}
			else if (map[y][x] == 'G') {
				e.y = y;
				e.x = x;
			}
		}
		y++;
		map_x_size = tmp.size();
	}
	map_y_size = y;
}

// 백트래킹 과정 중, G에 도착했을 때 지금까지 알아낸 경로중 가장 최단거리라면
// 경로를 기록하기 위해 S부터 G까지의 경로를 역추적하는 함수
void trace() {
	for (int i = 0; i < MAX_MAP_SIZE; i++) {
		for (int j = 0; j < MAX_MAP_SIZE; j++) {
			record_min_path[i][j] = NULL;
		}
	}
	p prv;
	p cur = e;
	// visit배열이 true인 곳을 따라서 G에서부터 S까지 while문을 돌면서 역추적한다
	// 그리고 그 경로를 record_min_path에 기록한다
	while (cur != s) {
		record_min_path[cur.y][cur.x] = '*';
		for (int i = 0; i < 4; i++) {
			p nxt; nxt.x = cur.x + dx[i]; nxt.y = cur.y + dy[i];
			if (nxt.y < 0 || nxt.x < 0 || nxt.y >= map_y_size || nxt.x >= map_x_size) continue;
			if (visit[nxt.y][nxt.x] && (prv != nxt)) {
				prv = cur;
				cur = nxt;
				break;
			}
		}
	}
}

// 백트래킹 기법을 이용하여 모든 경로를 탐색한다
void back_tracking(p cur, int d) {

	// recursion을 사용한다. 따라서 지나온 경로를
	// 다시 보는것을 막기 위한 visit 배열. true로 체크한다
	visit[cur.y][cur.x] = true;

	// G에 도착했다면 거리를 저장하고, 지금까지의 최단 거리보다 더 짧다면
	// 지금 경로를 저장하기 위해 trace()를 호출한다.
	if (cur == e) {
		candidate.push_back(d);
		if (min_dist > d) {
			min_dist = d;
			trace();
		}
		visit[cur.y][cur.x] = false;
		return;
	}

	// 인접한 4칸을 탐색하며 이동한다.
	for (int i = 0; i < 4; i++) {
		p nxt; nxt.x = cur.x + dx[i]; nxt.y = cur.y + dy[i];
		if (nxt.y < 0 || nxt.x < 0 || nxt.y >= map_y_size || nxt.x >= map_x_size) continue;
		if (visit[nxt.y][nxt.x]) continue;
		if (map[nxt.y][nxt.x] == '#') continue;
		back_tracking(nxt, d + 1);
	}

	// 이 칸의 4방향을 다 체크했으니 추후 다시 방문을 위해
	// visit을 false로 한다.
	visit[cur.y][cur.x] = false;

	return;
}

// 정답을 출력하는 함수
void answer_print() {
	for (int c : candidate) {
		for (int i = 0; i < 40; i++) cout << "=";
		cout << " Goal (" << c << ")\n";
	}

	cout << "\n\n\n";

	for (int i = 0; i < 40; i++) cout << "=";
	cout << " 최단거리 (" << min_dist << ")\n";

	for (int y = 0; y < map_y_size; y++) {
		for (int x = 0; x < map_x_size; x++) {
			if (record_min_path[y][x] == '*') {
				textcolor(BLACK, YELLOW);
				cout << '*';
			}
			else {
				textcolor(WHITE, BLACK);
				cout << map[y][x];
			}
		}
		textcolor(WHITE, BLACK);
		cout << "\n";
	}
}

int main() {
	input_file();
	back_tracking(s, 0);
	answer_print();
}
