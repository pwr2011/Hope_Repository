#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdio>
#define MAX_SIZE 100'000
#pragma warning(disable:4996)
using namespace std;

typedef pair<int, int> P;

int init[MAX_SIZE] = { 0 };

class BPTree {
public:
    const char* fileName;
    int blockSize;
    int depth;
    int rootBID;
    FILE* fp;
    vector<P> path;
    FILE* result;

    BPTree(const char* fileName) {
        this->fileName = fileName;
    }

    void read_file_info() {
        int buffer[3];
        fp = fopen((const char*)fileName, "rb+");
        fseek(fp, 0, 0);
        fread(&buffer, sizeof(int), 3, fp);
        blockSize = buffer[0]; rootBID = buffer[1]; depth = buffer[2];
    }

    void range_search(int s,int e) {
        vector<P> res;
        int bid = find_leaf(s);
        bool flag = true;
        bool start = false;
        int buffer[4] = { 0 };
        while ((flag  || !start) && bid != 0) {
            //read block
            flag = false;
            fseek(fp, 12 + ((bid - 1) * blockSize), 0);
            for (int i = 0; i < blockSize-4; i += 8) {
                fread(buffer, sizeof(int), 2, fp);
                if (s <= buffer[0] && e >= buffer[0]) {
                    res.push_back(P(buffer[0], buffer[1]));
                    start = true;
                    flag = true;
                }
            }

            //when we reach at last of the block, read the pointer which points next leaf node
            fread(buffer, sizeof(int), 1, fp);
            bid = buffer[0];
        }
        
        //save the result to the output file
        for (P cur : res) {
            fprintf(result, "%d,%d\t", cur.first, cur.second);
        }
        fprintf(result, "\n");
    }

    void search(int key) {
        bool flag = false;
        int buffer[4] = { 0 };
        int bid = find_leaf(key);
        fseek(fp, 12 + ((bid - 1) * blockSize), 0);
        for (int i = 0; i < blockSize - 4; i += 8) {
            fread(buffer, sizeof(int), 2, fp);
            if (buffer[0] == key) {
                flag = true; break;
            }
        } 
        fprintf(result,"%d,%d\n",buffer[0],buffer[1]);
    }

    void create(int bsize) {
        blockSize = bsize;
        depth = 1;
        rootBID = 1;
        fp = fopen((const char*)fileName, "wb");
        fwrite(&blockSize, sizeof(int), 1, fp);
        fwrite(&rootBID, sizeof(int), 1, fp);
        fwrite(&depth, sizeof(int), 1, fp);

        fwrite(&init, sizeof(int), blockSize/4, fp);
        fclose(fp);
    }

    //split이 일어나는 경우 2가지 root, not root
    //root경우는 새로운 root가 생김
    //non root는 다시 2가지 경우 leaf, non leaf
    //leaf경우는 value를 기준으로 2개 block으로 쪼갬
    //Non leaf경우는 포인터를 기준으로 2개로 쪼갬 그리고 위로 c'의 포인터를 넘김
    void insert(int key, int val) {
        //path는 변경이 되기 때문에 비워줘야 함
        path.clear();
        //insert data into tree
        int bid = find_leaf(key);
        insert_to_node(key, val, bid,depth);
    }

    void insert_to_node(int key, int val, int bid,int h) { // h is bid's depth
        //in the leaf node = key, val
        //in the non-leaf node = key, pointer(bid)

        //check the full
        int buffer[4];
        fseek(fp, 12 + ((bid - 1) * blockSize) + blockSize - 8, 0);
        fread(buffer, sizeof(int), 2, fp);

        //bid node is not full
        if (buffer[0] == 0) {
            if (h == depth) { // Leaf node case
                vector<P> tmp;
                for (int i = 0; i < blockSize; i += 8) {
                    fseek(fp, 12 + ((bid - 1) * blockSize) + i, 0);
                    fread(&buffer, sizeof(int), 2, fp); // read key
                    if (buffer[0] == 0) break;
                    tmp.push_back(P(buffer[0], buffer[1]));
                }
                //빈 공간 찾았으면 (=지금까지 저장한 값들 block에 다시 넣기)
                tmp.push_back(P(key, val));
                sort(tmp.begin(), tmp.end());
                for (int j = 0; j < tmp.size(); j++) {
                    fseek(fp, 12 + ((bid - 1) * blockSize)+(j*8), 0);
                    fwrite(&tmp[j].first, sizeof(int), 1, fp);
                    fwrite(&tmp[j].second, sizeof(int), 1, fp);
                }
            }
            else { // Non-leaf node case
                vector<P> tmp;
                for (int i = 4; i < blockSize; i += 8) {
                    fseek(fp, 12 + ((bid - 1) * blockSize)+i, 0);
                    fread(&buffer, sizeof(int), 2, fp);
                    if (buffer[0] == 0) break;
                    tmp.push_back(P(buffer[0], buffer[1]));
                }
                tmp.push_back(P(key, val));
                sort(tmp.begin(), tmp.end());
                for (int j = 0; j < tmp.size(); j++) {
                    fseek(fp, 12 + ((bid - 1) * blockSize) + (j * 8)+4, 0);
                    fwrite(&tmp[j].first, sizeof(int), 1, fp);
                    fwrite(&tmp[j].second, sizeof(int), 1, fp);
                }

            }
        }


        //bid node is full
        else {
            //find empty bid
            P ret = split_node(key, val, bid,h);
            int newbid = ret.first;
            int upvalue = ret.second;
            if (bid == rootBID) {
                //save the record to the new root node
                int newrootbid = newblock();
                fseek(fp, 12 + ((newrootbid - 1) * blockSize), 0);
                fwrite(&rootBID, sizeof(int), 1, fp);
                fwrite(&upvalue, sizeof(int), 1, fp);
                fwrite(&newbid, sizeof(int), 1, fp);

                //새로운 root가 생겼으니 depth와 rootBID갱신
                rootBID = newrootbid;
                depth++;
                fseek(fp, 4, 0);
                fwrite(&rootBID, sizeof(int), 1, fp);
                fwrite(&depth, sizeof(int), 1, fp);

            }
            else {
                int parentpid = 0;
                for (P cur : path) {
                    if (cur.second == bid) {
                        parentpid = cur.first;
                        break;
                    }
                }
                insert_to_node(upvalue, newbid, parentpid, h - 1);
            }
        }
    }

    //bid block을 나눈다
    P split_node(int key, int val, int bid,int h) { //c'의 bid와 value return
        P ret;
        int newbid = newblock();
        int tmp_buffer[1000];
        ret.first = newbid;
        vector<P> tmp;

        if (h == depth) {//leaf node is splited
             //bid block에 있는 모든 값들 저장
            fseek(fp, 12 + ((bid - 1) * blockSize), 0);
            for (int i = 0; i < blockSize - 4; i += 8) {
                fread(tmp_buffer, sizeof(int), 2, fp);
                if (tmp_buffer[0] == 0) break;
                tmp.push_back(P(tmp_buffer[0], tmp_buffer[1]));
            }
            tmp.push_back(P(key, val));

            //정렬 후 블럭 지우기
            sort(tmp.begin(), tmp.end());
            clear_block(bid,h);
            //file pointer is changed!

            int i;
            int idx = 0;
            //bid에 해당하는 leaf node와 newbid에 해당하는 leaf node에 균등하게 분배해야 한다.
            for (i = 0; i < tmp.size() / 2; i++) {
                tmp_buffer[idx++] = tmp[i].first;
                tmp_buffer[idx++] = tmp[i].second;
            }
            fseek(fp, 12 + ((bid - 1) * blockSize), 0);
            fwrite(tmp_buffer, sizeof(int), idx, fp);

            idx = 0;
            for (; i < tmp.size(); i++) {
                if (i == tmp.size() / 2) {
                    ret.second = tmp[i].first;
                }
                tmp_buffer[idx++] = tmp[i].first;
                tmp_buffer[idx++] = tmp[i].second;
                
            }
            fseek(fp, 12 + ((newbid - 1) * blockSize), 0);
            fwrite(tmp_buffer, sizeof(int), idx, fp);

            //bid와 newbid의 NextBID를 수정하고 newbid의 가장 작은 원소를 부모에 넣기

            //bid의 갱신
            fseek(fp, 12 + ((bid - 1) * blockSize) + blockSize - 4, 0);
            int nextnode;
            fread(&nextnode, sizeof(int), 1, fp);
            fseek(fp, 12 + ((bid - 1) * blockSize) + blockSize - 4, 0);
            fwrite(&newbid, sizeof(int), 1, fp);

            //new bid의 갱신 
            fseek(fp, 12 + ((newbid - 1) * blockSize)+blockSize-4, 0);
            fwrite(&nextnode, sizeof(int), 1, fp);
        }
        else {//Non leaf node is splited

            int tmp_val;
            fseek(fp, 12 + ((bid - 1) * blockSize), 0); //처음에 있는 포인터는 놔둔다
            fread(&tmp_val, sizeof(int), 1, fp);

            for (int i = 0; i <= blockSize - 8; i += 8) { // < blockSize-4로 해도 됨
                fread(tmp_buffer, sizeof(int), 2, fp);
                if (tmp_buffer[0] == 0) break;
                tmp.push_back(P(tmp_buffer[0], tmp_buffer[1]));
            }
            tmp.push_back(P(key, val));

            //정렬 후 블럭 초기화
            sort(tmp.begin(), tmp.end());
            clear_block(bid,h);

            fseek(fp, 12 + ((bid - 1) * blockSize), 0); //seek!!
            fwrite(&tmp_val, sizeof(int), 1, fp);
            
            int i;
            int idx = 0;
            //bid에 해당하는 leaf node와 newbid에 해당하는 leaf node에 균등하게 분배해야 한다.
            for (i = 0; i < tmp.size() / 2; i++) {
                tmp_buffer[idx++] = tmp[i].first;
                tmp_buffer[idx++] = tmp[i].second;
            }
            fwrite(tmp_buffer, sizeof(int), idx, fp);

            
            //첫 블럭의 value는 빼고 넣어야 함
            idx = 0;
            for (; i < tmp.size(); i++) {
                if (i == tmp.size() / 2) {
                    ret.second = tmp[i].first;
                    tmp_buffer[idx++] = tmp[i].second;
                }
                else {
                    tmp_buffer[idx++] = tmp[i].first;
                    tmp_buffer[idx++] = tmp[i].second;
                }
            }
            fseek(fp, 12 + ((newbid - 1) * blockSize), 0);
            fwrite(tmp_buffer, sizeof(int), idx, fp);

        }
        return ret;
    }

    void print(int bid) {
        fprintf(result, "<0>\n");
        int buffer = 0;
        vector<int> pointers;
        vector<int> val;
        fseek(fp, 12 + ((bid - 1) * blockSize), 0);
        for (int i = 0; i < blockSize / 4; i++) {
            fread(&buffer, sizeof(int), 1, fp);
            if (buffer == 0) {
                break;
            }
            if (i % 2 == 0) {//this is pointer
                pointers.push_back(buffer);
            }
            else {
                val.push_back(buffer);
            }
        }
        int i = 0;
        for (i; i < val.size() - 1; i++) {
            fprintf(result, "%d,", val[i]);
        }
        fprintf(result, "%d\n", val[i]);
        
        fprintf(result, "<1>\n");
        int b = 0;
        for (b = 0; b < pointers.size();b++) {
            fseek(fp, 12 + ((pointers[b] - 1) * blockSize), 0);
            for (int j = 0; j < blockSize / 4; j++) {
                fread(&buffer, sizeof(int), 1, fp);
                if (buffer == 0) {
                    break;
                }
                if (j % 2 != 0) {
                   fprintf(result, "%d", buffer);
                }
                else {
                    if (j != 0) {
                        fprintf(result, ",");
                    }
                }
            }
        }
        fseek(result, -1, 2);
        fprintf(result, "\n");
    }

    //This function initalize the block and FP
    void clear_block(int bid,int h) {
        fseek(fp, 12 + ((bid - 1) * blockSize), 0);
        if (h == depth) { //leaf node의 경우
            fwrite(&init, sizeof(int), blockSize / 4 - 1, fp);
        }
        else {
            fwrite(&init, sizeof(int), blockSize / 4, fp);
        }
    }

    int find_leaf(int key) {
        //함수의 전제조건 : 모든 node들은 height가 동일하다
        int bid = rootBID;
        if (depth == 1) {
            return rootBID;
        }
        else {
            int depth_cnt = 1;
            while (depth_cnt != depth) {
                //inside the block
                //find the leafnode
                for (int i = 0; i < blockSize; i += 8) {
                    fseek(fp, 12 + ((bid - 1) * blockSize) + i, 0);
                    int buffer[4];
                    // if touched last pointer
                    if (i == blockSize - 4) {
                        fread(buffer, sizeof(int), 1, fp);
                        path.push_back(P(bid, buffer[0]));
                        bid = buffer[0]; depth_cnt++;
                        break;
                    }
                    // not touched last pointer
                    fread(buffer, sizeof(int), 2, fp);
                    if (buffer[1] == 0) {
                        path.push_back(P(bid, buffer[0]));
                        bid = buffer[0]; depth_cnt++;
                        break;
                    }
                    else if (buffer[1] > key) {
                        path.push_back(P(bid, buffer[0]));
                        bid = buffer[0]; depth_cnt++;
                        break;
                    }
                }
            }
            return bid;
        }
    }

    int newblock() {//0을 삽입하자
        fseek(fp, 0, 2);
        int newbid = (ftell(fp) - 12) / blockSize + 1;
        fwrite(&init, sizeof(int), blockSize/4, fp);
        return newbid;
    }
};

int main(int argc, char* argv[]) {
    //char command = 'r';
    char command = argv[1][0];
    
    //const char* temp_name = "btree.bin";
    //BPTree* myBPtree = new BPTree(temp_name);
    BPTree* myBPtree = new BPTree((const char*)argv[2]);
    

    switch (command) {
    case 'c':
        //create index file
        myBPtree->create((int)atoi(argv[3]));
        //myBPtree->create(52);
        break;
    case 'i':
    {
        //insert record from 
        myBPtree->read_file_info();
        FILE* input = fopen((char*)argv[3], "r");
        //FILE* input = fopen((char*)"sample_insertion_input.txt", "r");
        fseek(input, 0, 0);
        int n1, n2;
        while (EOF != fscanf(input, "%d,%d", &n1, &n2)) {
            myBPtree->insert(n1, n2);
        }
        //leaf is not checked
        fclose(input);
        break;
    }
    case 's':
    {
        //search keys in [input file] and print result to [output file]
        myBPtree->read_file_info();
        FILE* input = fopen((char*)argv[3], "r");
        myBPtree->result = fopen((char*)argv[4], "w");
        fseek(input, 0, 0);
        int n1;
        while (EOF != fscanf(input, "%d", &n1)) {
            myBPtree->search(n1);
        }
        fclose(myBPtree->result);
        break;
    }
    case 'r':
    {
        //search keys in [input file] and print result to [outputfile]
        myBPtree->read_file_info();

        //FILE* input = fopen((char*)"sample_range_search.txt", "r");
        //myBPtree->result = fopen((char*)"range_output.txt", "w");
        FILE* input = fopen((char*)argv[3], "r");
        myBPtree->result = fopen((char*)argv[4], "w");
        fseek(input, 0, 0);
        int n1, n2;
        while (EOF != fscanf(input, "%d,%d", &n1, &n2)) {
            myBPtree->range_search(n1, n2);
        }
        fclose(myBPtree->result);
        break;
    }
    case 'p':
        //print Btree structure to [output file]
        myBPtree->read_file_info();
        //myBPtree->result = fopen("print.txt", "w");
        myBPtree->result = fopen((char*)argv[3], "w");
        myBPtree->print(myBPtree->rootBID);
        fclose(myBPtree->result);
        break;
    }
}
