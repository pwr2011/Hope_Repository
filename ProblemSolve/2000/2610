#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
typedef pair<int, int> P;

int N,M;
int p[105];
P rec[105];
vector<int> g[105];

int parent(int a) {
	if (p[a] == -1) return a;
	return p[a] = parent(p[a]);
}

void merge(int a, int b) {
	int p_a = parent(a);
	int p_b = parent(b);
	if (p_a != p_b) {
		if (p_a > p_b) {
			p[p_b] = p_a;
		}
		else {
			p[p_a] = p_b;
		}
	}
}

int dfs(int c) {
	bool visit[105] = { 0, };
	queue<int> q;
	q.push(c);
	visit[c] = 1;
	int d = 0;
	while (!q.empty()) {
		int qsize = q.size();
		for (int t = 0; t < qsize; t++) {
			int cur = q.front();
			q.pop();
			for (int n : g[cur]) {
				if (visit[n]) continue;
				q.push(n);
				visit[n] = 1;
			}
		}
		d++;
	}
	return d;
}

int main() {
	for (int i = 0; i < 105; i++) p[i] = -1;
	cin >> N >> M;
	for (int m = 0; m < M; m++) {
		int a, b; cin >> a >> b;
		merge(a, b);
		g[a].push_back(b);
		g[b].push_back(a);
	}

	for (int n = 1; n <= N; n++) {
		int d = dfs(n);
		if (rec[parent(n)].first > d || rec[parent(n)].first == 0) {
			rec[parent(n)] = { d,n };
		}
	}
	vector<int> tmp;
	for (int n = 1; n <= N; n++) {
		if (rec[n].first != 0) {
			tmp.push_back(rec[n].second);
		}
	}
	sort(tmp.begin(), tmp.end());
	cout << tmp.size()<<"\n";
	for (int c : tmp) {
		cout << c << "\n";
	}
}
