#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define INF 4'600'000'005
#define y first
#define x second
#define ll long long
using namespace std;
typedef pair<ll, ll> P;

ll Answer;
ll K;
P cur;
ll dp[10][1 << 8];
vector<ll> dx;
vector<ll> dy;
vector<P> points;

ll dist(P a, P b) {
	return abs(abs(a.y - b.y) + abs(a.x - b.x));
}

ll solve(ll k, ll status) {
	if (dp[k][status] != -1) return dp[k][status];
	if (k == 8) return 0;
	P nxt; nxt.y = cur.y + dy[k]; nxt.x = cur.x + dx[k];
	ll min_dis = INF;
	for (int idx = 0; idx < 8; idx++) {
		if (status & ((ll)1 << idx)) continue;
		int temp_status = status | ((ll)1 << idx);
		ll temp = dist(points[idx], nxt) + solve(k + 1, temp_status);
		if (temp < min_dis) {
			min_dis = temp;
		}
	}
	return dp[k][status] = min_dis;
}

int main(int argc, char** argv)
{
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	int T, test_case;
	cin >> T;
	for (test_case = 0; test_case < T; test_case++)
	{
		points.clear();
		Answer = INF;
		cin >> K;
		dx = { 0,K,2 * K,3 * K,3 * K,2 * K,K,0 };
		dy = { 0,-K,-K,0,K,2 * K,2 * K,K };

		for (int i = 0; i < 8; i++) {
			ll x, y; cin >> x >> y;
			points.push_back({ x,y });
		}
		for (int x = -10; x < 30; x++) {
			for (int y = -10; y < 30; y++) {
				cur = { y,x };

				for (int u = 0; u < 10; u++) {
					for (int v = 0; v < (1 << 8); v++) dp[u][v] = -1;
				}

				ll temp = solve(0, 0);
				Answer = min(Answer, temp);
			}
		}


		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;
	}

	return 0;
}
