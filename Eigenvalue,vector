from sympy import *
import sympy as sp
import numpy as np
import sys
import math

#######################################################################
#######################################################################
# 구한 행렬을 출력하는 format

def print_matrix(matrix, N):
    for i in range(0, N):
        for j in range(0, N):
            print('{:6s}'.format(str(matrix[i*N+j])),end=" ")
        print()
    print("")

#######################################################################
#######################################################################
# 고유값 계산
# 상태방정식을 구해서 근을 구하는 방법으로 구함

def find_eigenvalue(matrix, N):

    # 상태방정식을 만들어주는 poly 함수를 사용.
    e = 0.0001
    character = (np.poly(matrix))

    x = Symbol('x')
    equation = 0

    # 상태방정식을 solve 함수를 통해 근을 구함

    for i in range(0, N + 1):
        equation += character[i] * x ** (N - i)
    answer = (solve(equation))

    # 구한 근을 허수와 실수부로 나누어서 허수부가 0이 아니라면
    # 대각화 불가능 메세지를 출력
    # 실수만 존재한다면 고유값을 넘겨줌
    #
    # solve 함수를 통해 근을 구하게 되면 근사치를 얻게 되는지
    # 굉장히 작은 소수부분이 생겨서
    # 반올림을 통해 소수부분을 없앰

    for i in range(0, len(answer)):
        seperate = (answer[i].as_real_imag())
        seperate = list(seperate)

        for j in range(0, 2):
            if abs(seperate[j]) < e:
                seperate[j] = 0
        if (seperate[1] != 0):  # imaginary number is exist
            print("대각화가 불가능 합니다")
            sys.exit(0)
        else:
            answer[i] = round(seperate[0])

    return (answer)

#######################################################################
#######################################################################
# 고유벡터 계산 ( 가우스 소거법)
# Reduced Echelon Form 이 되면
# pivot 이 1인 위치에 해당하는 변수의 고유벡터에 관한 식을 얻을수 있는 것에 착안

def find_eigenvector(matrix, N):

    symbol_arr = symbols('a0:15')
    symbol_arr = list(symbol_arr)
    numpy_matrix = sp.Matrix(matrix)

    # 과제 1 이었던 Row Reduced Echelon Form 은 구현할 필요가
    # 없다고 생각되어 그냥 python 함수 사용했습니다.
    RREF = numpy_matrix.rref()
    RREF = RREF[0]

    result = []
    for i in range(0,N):
        tmp = [0]*(N)
        result.append(tmp)

    flag = [0]*N

    # pivot 이 1인 부분을 찾아 그에관한 식을 얻어낸다.

    for i in range(0,N):
        for j in range(i,N):
            if RREF[i,j] ==1:
                flag[j] =1
                for k in range(j+1,N):
                    result[i][k] = -1*RREF[i,k]
                break

    # 위 과정을 거쳐도 존재하는 식이 없었다면 그냥 독립변수이기에
    # 1을 넣어주었습니다.

    for i in range(0,N):
        if flag[i] == 0:
            result[i][i] =1

    eigenvector_arr = []

    for i in range(0,N):
        tmp=[]
        zero_cnt =0
        for j in range(0,N):
            tmp.append(result[j][i])
            if result[j][i] == 0:
                zero_cnt+=1

        if zero_cnt == N:
            continue
        else:
            eigenvector_arr.append(tmp)

    return eigenvector_arr

#######################################################################
#######################################################################
# 행렬 입력받기

N = int(input("Please input matrix size :"))
Matrix = []
print("Enter the Matrix :")

for i in range(N):
    a = []
    val = (input().split(" "))
    for j in range(N):
        a.append(int(val[j]))

    Matrix.append(a)

A = np.array(Matrix)
#########################################################################
#########################################################################
# eigenVector 와 eigenValue 를 함수호출을 통해 구한다.

eigenvalue_arr = find_eigenvalue(A, N)
eigenvalue_arr = list(set(eigenvalue_arr))
eigenvector_arr = []

for i in range(0, len(eigenvalue_arr)):
    copy_A = A.copy()
    for j in range(0, N):
        copy_A[j, j] -= eigenvalue_arr[i]
    tmp = find_eigenvector(copy_A,N)
    if not tmp:    # case : list is empty
        pass
    else:
        for j in range(0, len(tmp)):
            eigenvector_arr.append(tmp[j])
#########################################################################
#########################################################################
print("고유값: ", eigenvalue_arr)
print("고유벡터: ", eigenvector_arr)

if len(eigenvector_arr) != N:
    print("고유벡터의 갯수가 부족해 대각화를 할수 없습니다")
    sys.exit(0)

tmp_P =[]

for i in range(0,N):
    tmp_P.append([])
    for j in range(0,N):
        tmp_P[i].append(0)

for i in range(0,N):
    for j in range(0,N):
        tmp_P[i][j] = eigenvector_arr[j][i]

print("대각화가 가능합니다. ")
P = sp.Matrix(tmp_P)
A= sp.Matrix(A)

print("P:")
print_matrix(P, N)
P_inverse = P.inv()

print("P_inverse: ")
print_matrix(P_inverse,N)

diagonal = P_inverse*A*P

print("Diagonal(P_inv * A * P): ")
print_matrix(diagonal, N)
