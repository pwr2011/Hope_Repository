#include<iostream>
#include<algorithm>
#define INF 9'999'999'999
#define ll long long
using namespace std;

ll dp[55][55][55][55];
ll input[55][55];
ll prefix_sum[55][55]; 
ll N, M;

ll cal(ll s_y, ll s_x, ll e_y, ll e_x) {
	if (dp[s_y][s_x][e_y][e_x] != -1) return dp[s_y][s_x][e_y][e_x];
	ll min_cost = INF;
	if (s_y == e_y - 1 && s_x == e_x - 1) {
		return dp[s_y][s_x][e_y][e_x] = 0;
	}
	if (s_x != e_x - 1) {
		for (ll y_cut = s_x + 1; y_cut < e_x; y_cut++) {
			min_cost = min(min_cost, cal(s_y, s_x, e_y, y_cut) + cal(s_y, y_cut, e_y, e_x)
				+ prefix_sum[e_y][e_x] - prefix_sum[e_y][s_x] - prefix_sum[s_y][e_x] + prefix_sum[s_y][s_x]);
		}
	}

	if (s_y != e_y - 1) {
		for (ll x_cut = s_y + 1; x_cut < e_y; x_cut++) {
			min_cost = min(min_cost, cal(s_y, s_x, x_cut, e_x) + cal(x_cut, s_x, e_y, e_x)
				+ prefix_sum[e_y][e_x] - prefix_sum[e_y][s_x] - prefix_sum[s_y][e_x] + prefix_sum[s_y][s_x]);
		}
	}
	return dp[s_y][s_x][e_y][e_x] = min_cost;
}


int main() {
	for (ll i = 0; i < 55; i++) {
		for (ll j = 0; j < 55; j++) {
			for (ll k = 0; k < 55; k++) {
				for (ll l = 0; l < 55; l++) {
					dp[i][j][k][l] = -1;
				}
			}
		}
	}
	cin >> N >> M;
	for (ll n = 0; n < N; n++) {
		for (ll m = 0; m < M; m++) {
			cin >> input[n][m];
		}
	}
	for (ll n = 1; n <= N; n++) {
		for (ll m = 1; m <= M; m++) {
			prefix_sum[n][m] = prefix_sum[n - 1][m] + prefix_sum[n][m - 1]
				- prefix_sum[n - 1][m - 1] + input[n-1][m-1];
		}
	}

	cout<<cal(0, 0, N, M);
}
