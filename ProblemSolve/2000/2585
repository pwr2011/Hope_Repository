#include<iostream>
#include<vector>
#include<algorithm>
#include<cmath>
#include<queue>
using namespace std;
typedef pair<int, int> P;

vector<P> fuel[1'005];
P pos[1'005];
int N, K;

int cal_fuel(int i, int j) {
	P p_i = pos[i]; P p_j = pos[j];
	return ceil(sqrt(pow(p_i.first - p_j.first, 2) + pow(p_i.second - p_j.second, 2)) / 10);
}

bool bfs(int f) {
	queue<int> q;
	q.push(0);
	bool visit[1'005] = { false, };

	int times = 0;
	visit[0] = 1;
	while (!q.empty()) {
		int qsize = q.size();
		for (int t = 0; t < qsize; t++) {
			int cur = q.front(); q.pop();
			for (P nxt : fuel[cur]) {
				if (nxt.first > f) break;
				if (visit[nxt.second]) continue;
				if (nxt.second == N + 1) return true;
				q.push(nxt.second);
				visit[nxt.second] = 1;
			}
		}
		times++;
		if (times > K) return false;
	}
	return false;
}

int main() {
	cin >> N >> K;
	for (int n = 1; n <= N; n++) {
		cin >> pos[n].first >> pos[n].second;
	}

	pos[0] = { 0,0 };
	pos[N + 1] = { 10'000,10'000 };
	for (int i = 0; i <= N + 1; i++) {
		for (int j = i+1; j <= N + 1; j++) {
			int f = cal_fuel(i, j);
			fuel[i].push_back({ f,j });
			fuel[j].push_back({ f,i });
		}
	}
	for (int i = 0; i <= N + 1; i++) {
		sort(fuel[i].begin(), fuel[i].end());
	}

	int left = 1; int right = 15'000;
	while (left < right) {
		int cur = (left + right ) / 2;
		if (bfs(cur)) {
			right = cur;
		}
		else {
			left = cur+1;
		}
	}
	cout << left;
}
