#include <string>
#include <vector>
#include<queue>
#define INF 100'000'000
#define y first
#define x second
using namespace std;
typedef pair<int, int> P;

int dist[30][30][2];
bool visit[30][30][2];
int dx[] = { 0,0,1,-1 };
int dy[] = { -1,1,0,0 };
int N;

int solution(vector<vector<int>> board) {
    N = board.size();
    int answer = 0;

    priority_queue<pair<int,pair<bool,P>>> pq;
    //dist, bool, x,y 
    //0 가로 1 세로
    
    for (int i = 0; i < 30; i++) {
        for (int j = 0; j < 30; j++) {
            dist[i][j][0] = INF;
            dist[i][j][1] = INF;
        }
    }
    if (board[0][1] == 0) {
        pq.push({ -100, {0,{ 0,1 } } });
        dist[0][1][0] = 100;
        visit[0][0][0] = 1;
    }
    if (board[1][0] == 0) {
        pq.push({ -100, {1,{ 1,0 } } });
        dist[1][0][0] = 100;
        visit[0][0][1] = 1;
    }
    while (!pq.empty()) {
        auto c = pq.top(); pq.pop();
        P cur = c.second.second; int d = -c.first; bool flag = c.second.first;
        if (visit[cur.first][cur.second][flag]) continue;
        visit[cur.first][cur.second][flag] = 1;
        if (cur.y == N-1 && cur.x == N-1) break;

        for (int i = 0; i < 4; i++) {
            P next; next.first = cur.first + dx[i]; next.second = cur.second + dy[i];
            if (next.y < 0 || next.x < 0 || next.y >= N || next.x >= N) continue;
            if (board[next.y][next.x] == 1) continue;
            int cost = 0;
            if (cur.y != next.y) {
                cost = flag == 0 ? 600 : 100;
            }
            else {
                cost = flag == 1 ? 600 : 100;
            }
            bool changed_flag = cost == 600 ? !flag : flag;
            if (dist[next.y][next.x][changed_flag] >= d + cost) {
                dist[next.y][next.x][changed_flag] = d + cost;
                pq.push({ -(d + cost),{changed_flag, next} });
            }
        }
    }
    answer = min(dist[N - 1][N - 1][0],dist[N-1][N-1][1]);
    return answer;
}
