#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

int N, K, M;
vector<int> g[1'005];
vector<int> t[100'005];
bool visit[1'005];
bool finish[1'005];

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	 cin >> N >> K >> M;
	 if (N == 1) {
		 cout << "1";
		 return 0;
	 }
	 for (int m = 1; m <= M; m++) {
		 int tmp;
		 for (int k = 0; k < K; k++) {
			 cin >> tmp;
			 t[tmp].push_back(m);
		 }
	 }

	 for (int i = 1; i <= N; i++) {
		 for (int a = 0; a < t[i].size(); a++) {
			 for (int b = a + 1; b < t[i].size(); b++) {
				 g[t[i][a]].push_back(t[i][b]);
				 g[t[i][b]].push_back(t[i][a]);
			 }
		 }
	 }

	 queue<int> q;
	 for (int i = 0; i < t[1].size(); i++) {
		 q.push(t[1][i]);
		 visit[t[1][i]] = true;
	 }
	 for (int i = 0; i < t[N].size(); i++) {
		 finish[t[N][i]] = true;
	 }
	 
	 int used = 1;
	 while (!q.empty()) {
		 int qsize = q.size();
		 for (int i = 0; i < qsize; i++) {
			 int cur = q.front();
			 q.pop();
			 if (finish[cur]) {
				 cout << used + 1;
				 return 0;
			 }
			 for (int next : g[cur]) {
				 if (visit[next]) continue;
				 visit[next] = true;
				 q.push(next);
			 }
		 }
		 used++;
	 }
	 cout << -1;
	 return 0;
}
