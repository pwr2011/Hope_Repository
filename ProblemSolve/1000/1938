#include<iostream>
#include<queue>
using namespace std;
typedef pair<int, int> P;

int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };
char map[52][52];
bool visit[52][52][2]; //0은 가로 1은 세로
int init_pos[3][2];
int init_cnt;
int end_pos[3][2];
int end_cnt;
int N;
bool end_dir;
P End;

bool check(P pos, bool dir) {
	bool ret = true;
	if (pos.first < 0 || pos.second < 0 || pos.first >= N || pos.second >= N) return false;
	if (dir == 0) {
		if (pos.second - 1 < 0 || pos.second + 1 >= N) ret = false;
		for (int i = pos.second - 1; i <= pos.second + 1; i++) {
			if (map[pos.first][i] == '1') ret = false;
		}
	}
	else {
		if (pos.first - 1 < 0 || pos.first + 1 >= N) ret = false;
		for (int i = pos.first - 1; i <= pos.first + 1; i++) {
			if (map[i][pos.second] == '1') ret = false;
		}
	}
	return ret;
}

bool check_rot(P pos) {
	if (pos.first - 1 < 0 || pos.first + 1 >= N || pos.second - 1 < 0 || pos.second + 1 >= N) return false;
	for (int i = pos.first - 1; i <= pos.first + 1; i++) {
		for (int j = pos.second - 1; j <= pos.second + 1; j++) {
			if (map[i][j] == '1') {
				return false;
			}
		}
	}
	return true;
}

int main() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 'B') {
				init_pos[init_cnt][0] = i;
				init_pos[init_cnt++][1] = j;
			}
			if (map[i][j] == 'E') {
				end_pos[end_cnt][0] = i;
				end_pos[end_cnt++][1] = j;
			}
		}
	}
	if (end_pos[0][0] != end_pos[1][0]) end_dir = 1;
	End.first = end_pos[1][0]; End.second = end_pos[1][1];
	bool init_dir = 0;
	if (init_pos[0][0] != init_pos[1][0]) init_dir = 1;
	queue<pair<bool, pair<int, int>>> q; q.push({ init_dir,{init_pos[1][0], init_pos[1][1] }});

	bool end_flag = false;
	int cnt = 0;
	while (!q.empty()) {
		int qsize = q.size();
		for (int t = 0; t < qsize; t++) {
			auto c = q.front(); q.pop();
			P cur = { c.second.first,c.second.second };
			bool dir = c.first;
			if (End == cur && dir == end_dir) {
				end_flag = true;
				break;
			}
			for (int i = 0; i < 4; i++) {
				P next;
				next.first = cur.first + dy[i]; next.second = cur.second + dx[i];
				if (check(next, dir)) {
					if (visit[next.first][next.second][dir])continue;
					q.push({ dir,next });
					visit[next.first][next.second][dir] = 1;
				}
			}
			dir = dir == 0 ? 1 : 0;
			if (visit[cur.first][cur.second][dir])continue;
			if (check_rot(cur)) {
				q.push({ dir,cur });
				visit[cur.first][cur.second][dir] = 1;
			}
		}
		if (end_flag) break;
		cnt++;
	}
	if (end_flag)cout << cnt;
	else cout << 0;
}
