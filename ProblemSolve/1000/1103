#include<iostream>
#include<vector>
#include<algorithm>
#define y first
#define x second
using namespace std;
typedef pair<int, int> P;

int N, M;
char map[55][55];
bool check[55][55];
int visit[55][55];
vector<int> g[2515];

int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };

int dfs(int y, int x) {
	check[y][x] = true;
	int num = y * M + x;
	int max_len = 0;
	if (g[num].size() == 0) {
		if (map[y][x] != 'H') {
			check[y][x] = false;
			return visit[y][x] = 1;
		}
	}
	for (int next : g[num]) {
		int n_y = next / M;
		int n_x = next % M;
		if (check[n_y][n_x]) {
			cout << -1;
			exit(0);
		}
		if (visit[n_y][n_x] != -1) { 
			max_len = max(max_len, visit[n_y][n_x]+1);
		}
		else {
			max_len = max(max_len, dfs(n_y, n_x)+1);
		}
	}
	check[y][x] = false;
	return visit[y][x] = max_len;
}

int main() {
	cin >> N >> M;
	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			cin >> map[n][m];
		}
	}

	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			visit[n][m] = -1;
		}
	}

	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			if (map[n][m] == 'H') continue;
			int num = n * M + m;
			int len = map[n][m]-'0';
			P nxt;
			for (int i = 0; i < 4; i++) {
				nxt.y = n + dy[i] * len;
				nxt.x = m + dx[i] * len;
				if (nxt.y >= N || nxt.x >= M || nxt.y < 0 || nxt.x < 0) {
					continue;
				}
				int nxt_num = nxt.y * M + nxt.x;
				g[num].push_back(nxt_num);
			}
		}
	}

	cout<<dfs(0, 0);
}
