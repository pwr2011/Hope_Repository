#include<iostream>
#include<string>
using namespace std;

bool dp[105][105];
string P, T;

bool solve(int t, int p) {
	if (dp[t][p]) return false;
	bool ans = false;

	if (P.size() == p && T.size() == t) {
		return true;
	}

	if (P.size() <= p) {
		dp[t][p] = true;
		return false;
	}

	if (P[p] == '*') {
		ans = solve(t, p+1);
		if (ans) {
			return true;
		}
		for (int len = 0; len + t < T.size(); len++) {
			ans = solve(t + len + 1, p + 1);
			if (ans) {
				return true;
			}
		}
	}

	if (P[p] == T[t]) {
		ans = solve(t + 1, p + 1);
		if (ans) return true;
	}

	dp[t][p] = true;
	return false;
}

int main() {
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);

	cin >> P;
	int N; cin >> N;
	for (int n = 0; n < N; n++) {
		for (int i = 0; i < 105; i++) {
			for (int j = 0; j < 105; j++) {
				dp[i][j] = false;
			}
		}
		cin >> T;

		if (solve(0, 0)) {
			cout << T << "\n";
		}
	}
}
