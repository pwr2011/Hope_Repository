#include<iostream>
#include<vector>
using namespace std;

int child[1'005][2];
int root = 0;
vector<int> pre;
vector<int> in;
int pos[1'005];
int idx = 0;

void solve(int r,int s,int e) {
	int r_idx = pos[r];
	if (s <= r_idx - 1) {
		child[r][0] = pre[idx++];
		solve(child[r][0], s, r_idx - 1);
	}
	if (r_idx + 1 <= e) {
		child[r][1] = pre[idx++];
		solve(child[r][1], r_idx + 1, e);
	}
}

void print(int c) {
	if (child[c][0] != 0) {
		print(child[c][0]);
	}
	if (child[c][1] != 0) {
		print(child[c][1]);
	}
	cout << c << " ";
}

int main() {
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	int T; cin >> T;
	while (T--) {
		int N; cin >> N;
		for (int n = 0; n < N; n++) {
			int t; cin >> t;
			pre.push_back(t);
		}
		for (int n = 0; n < N; n++) {
			int t; cin >> t;
			in.push_back(t);
		}

		for (int i = 0; i < in.size();i++) {
			pos[in[i]] = i;
		}

		root = pre[idx++];

		solve(root,0,N-1);
		print(root);
		cout << "\n";

		// initialize
		pre.clear();
		in.clear();
		idx = 0;
		root = 0;
		for (int i = 0; i < 1'005; i++) {
			child[i][0] = 0;
			child[i][1] = 0;
			pos[i] = 0;
		}
	}
}
