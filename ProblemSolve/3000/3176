#include<iostream>
#include<vector>
#include<algorithm>
#include<string.h>
#define INF 2100000000
#define MAX_D 18
using namespace std;
typedef pair<int, int> P;

vector<P> g[100'005];
int parent[100'005][MAX_D];
int w_max[100'005][MAX_D];
int w_min[100'005][MAX_D];

int depth[100'005];

void makeTree(int c,int p) {
	for (P n : g[c]) {
		if (n.first == p) continue;
		w_max[n.first][0] = n.second;
		w_min[n.first][0] = n.second;
		parent[n.first][0] = c;
		depth[n.first] = depth[c] + 1;
		makeTree(n.first, c);
	}
}

int main() {
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	int N; cin >> N;
	for (int n = 0; n < N-1; n++) {
		int a, b, c; cin >> a >> b >> c;
		a--; b--;
		g[a].push_back(P(b, c));
		g[b].push_back(P(a, c));
	}

	memset(parent, -1, sizeof(parent));
	memset(depth, -1, sizeof(depth));

	depth[0] = 0;
	makeTree(0,-1);

	for (int i = 1; i < MAX_D; i++) {
		for (int n = 0; n < N; n++) {
			if (parent[n][i - 1] != -1) {
				parent[n][i] = parent[parent[n][i - 1]][i - 1];
				w_max[n][i] = max(w_max[n][i - 1], w_max[parent[n][i - 1]][i - 1]);
				w_min[n][i] = min(w_min[n][i - 1], w_min[parent[n][i - 1]][i - 1]);
			}
		}
	}

	int K; cin >> K;
	for (int k = 0; k < K; k++) {
		int rmin = INF;
		int rmax = -INF;
		int D, E; cin >> D >> E;
		D--; E--;
		if (depth[D] < depth[E])swap(D, E);

		int diff = depth[D] - depth[E];
		for (int j = 0;diff; j++) {
			if (diff % 2) {
				rmin = min(rmin, w_min[D][j]);
				rmax = max(rmax, w_max[D][j]);
				D = parent[D][j];
			}
			diff /= 2;
		}

		if (D != E) {
			for (int j = MAX_D - 1; j >= 0; j--) {
				if (parent[D][j] != -1 && parent[D][j] != parent[E][j]) {
					rmin = min(rmin, min(w_min[D][j],w_min[E][j]));
					rmax = max(rmax, max(w_max[D][j], w_max[E][j]));
					D = parent[D][j];
					E = parent[E][j];
				}
			}
			rmin = min(rmin, min(w_min[D][0], w_min[E][0]));
			rmax = max(rmax, max(w_max[D][0], w_max[E][0]));
		}
		cout << rmin << " " << rmax << "\n";
	}
}
