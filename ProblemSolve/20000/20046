#include<iostream>
#include<queue>
#define y first
#define x second
#define INF 10'000'000
using namespace std;
typedef pair<int, int> P;

int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };
int map[1'005][1'005];
bool visit[1'005][1'005];
int dist[1'005][1'005];

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	int M, N; cin >> M >> N;

	for (int m = 0; m < M; m++) {
		for (int n = 0; n < N; n++) {
			cin >> map[m][n];
		}
	}

	for (int i = 0; i < 1'005; i++) {
		for (int j = 0; j < 1'005; j++) dist[i][j] = INF;
	}
	priority_queue<pair<int, P>> pq;
	int t = 0;
	if (map[0][0] == 1) t = 1;
	else if (map[0][0] == 2) t = 2;
	pq.push({ -t,P(0,0) });
	dist[0][0] = t;
	if (map[0][0] == -1) {
		cout << -1; return 0;
	}

	int ans = -1;
	while (!pq.empty()) {
		auto c = pq.top(); pq.pop();
		P cur = c.second; int d = -c.first;
		if (visit[cur.y][cur.x]) continue;
		if (dist[cur.y][cur.x] != d) continue;

		visit[cur.y][cur.x]= true;
		if (M - 1 == cur.y && N - 1 == cur.x) {
			ans = d;
			break;
		}
		for (int i = 0; i < 4; i++) {
			P n; n.first = cur.first + dx[i]; n.second = cur.second + dy[i];
			if (n.y < 0 || n.x < 0 || n.y >= M || n.x >= N) continue;
			if (visit[n.y][n.x] || map[n.y][n.x] == -1)continue;
			int cost = map[n.y][n.x];
			if (d + cost < dist[n.y][n.x]) {
				dist[n.y][n.x] = d + cost;
				pq.push({ -dist[n.y][n.x],n });
			}
		}
	}
	cout << ans;
}
