#include <string>
#include <algorithm>
#include<vector>
using namespace std;

int answer = 0;
bool visit2[2'005];
vector<string> arr1;
vector<string> arr2;
int intersection_cnt;
int union_cnt;

int solution(string str1, string str2) {
    char ch1, ch2;
    for (int i = 0; i < str1.size() - 1; i++) {
        ch1 = tolower(str1[i]);
        ch2 = tolower(str1[i + 1]);
        if (!(ch1 >= 'a' && ch1 <= 'z') || !(ch2 >= 'a' && ch2 <= 'z')) {
            continue;
        }
        string t = "";
        t.append(1, ch1);
        t.append(1, ch2);

        arr1.push_back(t);
    }
    for (int i = 0; i < str2.size() - 1; i++) {
        ch1 = tolower(str2[i]);
        ch2 = tolower(str2[i + 1]);
        if (!(ch1 >= 'a' && ch1 <= 'z') || !(ch2 >= 'a' && ch2 <= 'z')) {
            continue;
        }
        string t = "";
        t.append(1, ch1);
        t.append(1, ch2);
        arr2.push_back(t);
    }

    for (int i = 0; i < arr1.size(); i++) {
        for (int j = 0; j < arr2.size(); j++) {
            if (arr1[i] == arr2[j] && !visit2[j]) {
                visit2[j] = 1;
                intersection_cnt++;
                break;
            }
        }
    }
    for (int i = 0; i < 2'005; i++) visit2[i] = 0;

    for (int i = 0; i < arr1.size(); i++) {
        for (int j = 0; j < arr2.size(); j++) {
            if (arr1[i] == arr2[j] && !visit2[j]) {
                visit2[j] = 1;
                break;
            }
        }
        union_cnt++;
    }
    for (int i = 0; i < arr2.size(); i++) {
        if (!visit2[i]) union_cnt++;
    }

    if (union_cnt == 0) answer = 1*65536;
    else answer = (1.0 * intersection_cnt / union_cnt) * 65536;
    return answer;
}
