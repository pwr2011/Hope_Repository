#include<iostream>
#include<cmath>
#define MIN_MAX -1'000'000'000'000'000
#define ll long long
using namespace std;

int N, D;
int K[100'005];
ll start;
ll arr[400'005];
ll dp[100'005];

void update(int idx,ll val) {
	int i = start + idx;
	arr[i] = val;
	dp[idx] = val;
	i /= 2;
	while (i > 0) {
		arr[i] = max(arr[i * 2], arr[i * 2 + 1]);
		i /= 2;
	}
}

ll find(int L, int R, int node = 1, int nodeL = 0, int nodeR = start - 1) {
	if (L <= nodeL && nodeR <= R) return arr[node];
	if (R < nodeL || nodeR<L) return MIN_MAX;
	int mid = (nodeL + nodeR) / 2;
	return max(find(L, R, node * 2, nodeL, mid), find(L, R, node * 2 + 1, mid + 1, nodeR));
}

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	cin >> N >> D;
	start = pow(2, ceil(log2(N)));

	for (int n = 0; n < N; n++) {
		cin >> K[n];
	}

	update(N - 1, K[N - 1]);
	// 답에는 예외적으로 K[N-1] 고려해야함

	for (int i = N - 2; i >= 0; i--) {
		int j = i + D < N ? i + D : N - 1;
		ll max_val = find(i + 1, j);
		ll cur_max_sum = max((ll)K[i],max_val + K[i]);
		update(i, cur_max_sum);
	}

	ll ans = K[N - 1];
	for (int i = 0; i < N; i++) {
		ans = max(ans, dp[i]);
	}
	cout << ans;
}
