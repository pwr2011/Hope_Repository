#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;

struct obj {
	int v, c, k;
};
int N, M;
int info[105][3];
int dp[2000][10'005];
vector<obj> arr;

int main() {
	cin >> N >> M;
	for (int n = 1; n <= N; n++) {
		for (int i = 0; i < 3; i++) {
			cin >> info[n][i];
		}
	}

	for (int n = 1; n <= N; n++) {
		if (info[n][2] != 1) {
			int k = info[n][2];
			int v = info[n][0];
			int c = info[n][1];
			int base = 0;
			while (k) {
				int mul = (int)pow(2, base);
				if (k == 1) {
					arr.push_back({ v * (info[n][2] - (mul - 1)), c * (info[n][2] - (mul - 1)) ,k - (mul - 1) });
					break;
				}
				arr.push_back({ v * mul, c * mul, mul });
				base++;
				k /= 2;
			}
		}
		else {
			arr.push_back({ info[n][0], info[n][1], info[n][2] });
		}
	}
	 

	for (int i = 1; i <= arr.size(); i++) {
		obj cur = arr[i - 1];
		for (int w = 0; w <= M; w++) {
			if (cur.v <= w) {
				dp[i][w] = max(dp[i - 1][w - cur.v] + cur.c, dp[i - 1][w]);
			}
			else {
				dp[i][w] = dp[i - 1][w];
			}
		}
	}
	cout << dp[arr.size()][M];
}
