#include <string>
#include <vector>
#include <algorithm>
#define x 0
#define y 1
using namespace std;

vector<vector<int>> info;
vector<int> pre;
vector<int> post;
int child[10'005][2];
int to_idx[100'005];

int find_max_y(int L, int R) {
	int idx = 0;
	int cur_max_x = -1;
	for (int i = L; i <= R; i++) {
		if (info[i][y] > cur_max_x) {
			cur_max_x = info[i][y];
			idx = i;
		}
	}
	return idx;
}

void solve(int L, int R, int idx) {
	if (L <= idx - 1) {
		int max_y_idx = find_max_y(L, idx - 1);
		child[idx][x] = max_y_idx;
		solve(L, idx - 1, max_y_idx);
	}
	if (idx + 1 <= R) {
		int max_y_idx = find_max_y(idx + 1, R);
		child[idx][y] = max_y_idx;
		solve(idx + 1, R, max_y_idx);
	}
}

void post_order(int idx) {
	if (child[idx][x] != -1) {
		post_order(child[idx][x]);
	}
	if (child[idx][y] != -1) {
		post_order(child[idx][y]);
	}
	post.push_back(to_idx[info[idx][0]]+1);
}
void pre_order(int idx) {
	pre.push_back(to_idx[info[idx][0]] + 1);
	if (child[idx][x] != -1) {
		pre_order(child[idx][x]);
	}
	if (child[idx][y] != -1) {
		pre_order(child[idx][y]);
	}
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
	vector<vector<int>> answer;

	for (int i = 0; i < nodeinfo.size(); i++) {
		to_idx[nodeinfo[i][0]] = i;
	}
	info = nodeinfo;
	sort(info.begin(), info.end());

	for (int i = 0; i < 10'005; i++) {
		child[i][0] = -1;
		child[i][1] = -1;
	}

	int max_y = find_max_y(0, info.size() - 1);

	solve(0, info.size() - 1, max_y);
	pre_order(max_y);
	post_order(max_y);
	answer.push_back(pre);
	answer.push_back(post);
	return answer;
}

int main() {
	vector<vector<int>> nodeinfo = { {{5,3},{11,5},{13,3},{3,5},{6,1},{1,3},{8,6},{7,2},{2,2}} };
	solution(nodeinfo);
}
