#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
using namespace std;

const int MAX = 18;
int N, M;
int parent[100'000][MAX];
int depth[100'000];
vector<int> adj[100000];

void DFS(int cur) {
	for (int next : adj[cur]) {
		if (depth[next] == -1) {
			parent[next][0] = cur;
			depth[next] = depth[cur] + 1;
			DFS(next);
		}
	}
}

int main() {
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	cin >> N;
	for (int i = 0; i < N - 1; i++) {
		int u, v;
		cin >> u >> v;
		adj[u - 1].push_back(v - 1);
		adj[v - 1].push_back(u - 1);
	}

	memset(parent, -1, sizeof(parent));
	memset(depth, -1, sizeof(depth));
	depth[0] = 0;
	DFS(0);

	for (int j = 0; j < MAX - 1; j++) {
		for (int i = 1; i < N; i++) {
			if (parent[i][j] != -1) {
				parent[i][j + 1] = parent[parent[i][j]][j];
			}
		}
	}
	cin >> M;
	for (int i = 0; i < M; i++) {
		int u, v; cin >> u >> v;
		u--; v--;

		if (depth[u] < depth[v]) swap(u, v);
		int diff = depth[u] - depth[v];
		for (int j = 0; diff; j++) {
			if (diff % 2) u = parent[u][j];
			diff /= 2;
		}

		if (u != v) {
			for (int j = MAX - 1; j >= 0; j--) {
				if (parent[u][j] != -1 && parent[u][j] != parent[v][j]) {
					u = parent[u][j];
					v = parent[v][j];
				}
			}
			u = parent[u][0];
		}
		cout << u + 1<<"\n";
	}
}
