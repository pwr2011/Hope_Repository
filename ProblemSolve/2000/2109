#include<iostream>
#include<algorithm>
using namespace std;

pair<int, int> payandday[10'005];
int p[10'005];

int parent(int a) {
	if (p[a] == -1) return a;
	return p[a] = parent(p[a]);
}

void merge(int a, int b) {
	int p_a = parent(a);
	int p_b = parent(b);

	if (p_a == p_b) return;
	if (p_a > p_b) {
		p[p_a] = p_b;
	}
	else {
		p[p_b] = p_a;
	}
}

int main() {
	for (int i = 0; i < 10'005; i++) {
		p[i] = -1;
	}

	int N; cin >> N;
	for (int n = 0; n < N; n++) {
		cin >> payandday[n].first >> payandday[n].second;
	}

	int ans = 0;
	bool use_first_day = false;
	sort(payandday, payandday+N, greater<>());
	for (int n = 0; n < N; n++) {
		int pay = payandday[n].first;
		int day = payandday[n].second;
		int idx = parent(day);
		if (idx != 1) {
			ans += pay;
			merge(idx-1, idx);
		}
		else if (!use_first_day) {
			use_first_day = true;
			ans += pay;
		}
		else {
			continue;
		}
	}
	cout << ans;
}
