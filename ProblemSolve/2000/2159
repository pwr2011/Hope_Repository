#include<iostream>
#include<cmath>
#include<algorithm>
#define ll long long
#define x first
#define y second
#define MAX_D 1'000'000'000'000
using namespace std;
typedef pair<ll, ll> P;

P arr[100'005];
ll dx[] = { -1,0,1,0};
ll dy[] = { 0,1,0,-1};
ll d_c[9];
ll d_n[9];

ll dist(P a, P b) {
	return abs(a.first - b.first) + abs(a.second - b.second); 
}

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	ll N; cin >> N;
	cin >> arr[0].first >> arr[0].second;
	for (ll n = 1; n <= N; n++) {
		cin >> arr[n].first>>arr[n].second;
	}

	for (ll i = 0; i < 4; i++) {
		P c;
		c.x = arr[1].x + dx[i]; c.y = arr[1].y + dy[i];
		d_c[i] = dist(arr[0], c);
	}

	for (ll n = 1; n < N; n++) {
		for (ll i = 0; i < 4; i++) {
			d_n[i] = MAX_D;
			P nxt;
			nxt.x = arr[n + 1].x + dx[i];
			nxt.y = arr[n + 1].y + dy[i];
			if (nxt.x < 0 || nxt.y < 0 || nxt.x>100'000 || nxt.y>100'000)continue;
			for (ll j = 0; j < 4; j++) {
				P c;
				c.x = arr[n].x + dx[j];
				c.y = arr[n].y + dy[j];
				d_n[i] = min(d_n[i], d_c[j] + dist(c, nxt));
			}
		}
		for (ll i = 0; i < 4; i++) {
			d_c[i] = d_n[i];
		}
		ll st = 0;
	}

	ll ans = MAX_D;
	for (ll i = 0; i < 4; i++) {
		ans = min(ans, d_c[i]);
	}
	cout << ans;
}
