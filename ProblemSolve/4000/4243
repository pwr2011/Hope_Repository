#include<iostream>
#include<algorithm>
#define ll long long 
using namespace std;

int N, A;
int len[100'005];
ll dp[105][105][2];
ll sum[105];

ll solve(ll s,ll e,ll p){ //p = 0 -> left ; p = 1 -> right
	if (dp[s][e][p] != -1) return dp[s][e][p];

	if (s == 1 && e == N) return 0;
	
	ll left = N - (e - s + 1);
	ll ans = 1'500'000'000'000'000;

	if (s > 1) {
		ll cost = p == 0 ? sum[s] - sum[s - 1] : sum[e] - sum[s - 1];
		ans = min(ans, solve(s - 1, e, 0) + cost * left);
	}
	if (e < N) {
		ll cost = p == 0 ? sum[e + 1] - sum[s] : sum[e + 1] - sum[e];
		ans = min(ans, solve(s, e + 1, 1) + cost * left);
	}

	return dp[s][e][p] = ans;
}

int main() {
	cin.tie(NULL);
	cout.tie(NULL);
	ios::sync_with_stdio(false);
	int T; cin >> T;
	while (T--) {
		for (int i = 0; i < 105; i++) {
			for (int j = 0; j < 105; j++) {
				dp[i][j][0] = -1;
				dp[i][j][1] = -1;
			}
		}
		cin >> N >> A;
		for (int n = 0; n < N - 1; n++) {
			cin >> len[n];
			sum[n + 2] = sum[n + 1] + len[n];
		}

		
		cout<<solve(A, A, 0)<<"\n";
	}
}
