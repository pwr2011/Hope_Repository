#include<iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;
typedef pair<int, int> P;

char map[105][105];
bool visit[105][105];
int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };

void solve() {
	vector<P> pos[28];
	bool key[28] = { false };
	string cur;
	int H, W; cin >> H >> W;
	for (int h = 1; h <= H; h++) {
		for (int w = 1; w <= W; w++) {
			cin >> map[h][w];
		}
	}
	cin >> cur;
	if (cur[0] != '0') {
		for (int c = 0; c < cur.size(); c++) {
			key[cur[c] - 'a'] = true;
		}
	}

	int ans = 0;
	queue<P> q;
	q.push(P(0, 0));
	while (!q.empty()) {
		P cur = q.front(); q.pop();
		for (int i = 0; i < 4; i++) {
			P next;
			next.first = cur.first + dy[i];
			next.second = cur.second + dx[i];
			if (next.first<0 || next.second<0 || next.first>H+1 || next.second >W+1) {
				continue;
			}
			if (visit[next.first][next.second]) continue;
			char next_char = map[next.first][next.second];
			if (next_char == '$') {
				ans++;
			}
			else if (next_char == '*') continue;
			else if (next_char - 'a' >= 0 && next_char - 'a' <= 25) {
				for (P c : pos[next_char - 'a']) {
					q.push(c);
				}
				key[next_char - 'a'] = true;
			}
			else if('A'<=next_char && next_char<='Z') { //대문자
				if (!key[next_char - 'A']) {
					pos[next_char - 'A'].push_back(next);
					continue;
				}
			}
			visit[next.first][next.second] = true;
			q.push(next);
		}
	}
	cout << ans << "\n";
}

int main() {
	int T; cin >> T;
	while (T--) {
		for (int i = 0; i < 105; i++) {
			for (int j = 0; j < 105; j++) {
				map[i][j] = '.';
				visit[i][j] = false;
			}
		}
		solve();
	}
}
