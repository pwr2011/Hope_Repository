#include<iostream>
#include<algorithm>
#include<vector>
#define ll long long
using namespace std;

typedef pair<ll, ll> P;

ll p[200'005]; 
int N;
vector<P> input;

ll Parent(ll a) {
	if (p[a] == -1) return a;
	return p[a] = Parent(p[a]);
}

void merge(ll a, ll b) {
	ll p_a = Parent(a);
	ll p_b = Parent(b);

	if (p_a != p_b) {
		if (p_a < p_b) {
			p[p_b] = p_a;
		}
		else {
			p[p_a] = p_b;
		}
	}
}

int main() {
	cin >> N;
	for (int n = 0; n < N; n++) {
		P tmp;
		cin >> tmp.second >> tmp.first;
		tmp.first *= -1;
		input.push_back(tmp);
	}

	for (int i = 0; i <= N; i++) {
		p[i] = -1;
	}
	sort(input.begin(), input.end());
	
	ll ans = 0;
	for (int i = 0; i < N; i++) {
		ll reward = -input[i].first;
		ll dead = input[i].second;

		ll p_dead = Parent(dead);
		if (p_dead == -1) {
			merge(dead, dead - 1);
			ans += reward;
		}
		else if (p_dead != 0) {
			merge(p_dead - 1, p_dead);
			ans += reward;
		}
	}
	cout << ans;
}
